{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/dalecottrell/Desktop/my-portfolio2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/dalecottrell/Desktop/my-portfolio2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/dalecottrell/Desktop/my-portfolio2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/dalecottrell/Desktop/my-portfolio2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/dalecottrell/Desktop/my-portfolio2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nvar Utils_1 = require(\"../../../Utils\");\n\nvar Enums_1 = require(\"../../../Enums\");\n\nvar ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nvar ProcessBubbleType_1 = require(\"./ProcessBubbleType\");\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    var value = particleValue + (modeValue - optionsValue) * ratio;\n    return Utils_1.clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    var _value = particleValue - (optionsValue - modeValue) * ratio;\n\n    return Utils_1.clamp(_value, modeValue, particleValue);\n  }\n}\n\nvar Bubbler = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bubbler, _ExternalInteractorBa);\n\n  function Bubbler(container) {\n    _classCallCheck(this, Bubbler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Bubbler).call(this, container));\n  }\n\n  _createClass(Bubbler, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = Utils_1.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n\n      if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      var clickMode = events.onClick.mode;\n      return Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle, force) {\n      if (!(!particle.bubble.inRange || force)) {\n        return;\n      }\n\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _this = this;\n\n      var options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n      if (hoverEnabled && Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n        this.hoverBubble();\n      } else if (clickEnabled && Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n        this.clickBubble();\n      } else {\n        Utils_1.divModeExecute(Enums_1.DivMode.bubble, divs, function (selector, div) {\n          return _this.singleSelectorHover(selector, div);\n        });\n      }\n    }\n  }, {\n    key: \"singleSelectorHover\",\n    value: function singleSelectorHover(selector, div) {\n      var _this2 = this;\n\n      var container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n      if (!selectors.length) {\n        return;\n      }\n\n      selectors.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n\n            if (!area.contains(particle.getPosition())) {\n              continue;\n            }\n\n            particle.bubble.inRange = true;\n            var divs = container.actualOptions.interactivity.modes.bubble.divs;\n            var divBubble = Utils_1.divMode(divs, elem);\n\n            if (!particle.bubble.div || particle.bubble.div !== elem) {\n              _this2.reset(particle, true);\n\n              particle.bubble.div = elem;\n            }\n\n            _this2.hoverBubbleSize(particle, 1, divBubble);\n\n            _this2.hoverBubbleOpacity(particle, 1, divBubble);\n\n            _this2.hoverBubbleColor(particle, 1, divBubble);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function process(particle, distMouse, timeSpent, data) {\n      var container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n      if (bubbleParam === undefined) {\n        return;\n      }\n\n      var options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n      if (bubbleParam === particlesParam) {\n        return;\n      }\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n              particle.bubble.radius = value;\n            }\n\n            if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }, {\n    key: \"clickBubble\",\n    value: function clickBubble() {\n      var container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (!mouseClickPos) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n      var _iterator2 = _createForOfIteratorHelper(query),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var particle = _step2.value;\n\n          if (!container.bubble.clicking) {\n            continue;\n          }\n\n          particle.bubble.inRange = !container.bubble.durationEnd;\n          var pos = particle.getPosition(),\n              distMouse = Utils_1.getDistance(pos, mouseClickPos),\n              timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n          if (timeSpent > options.interactivity.modes.bubble.duration) {\n            container.bubble.durationEnd = true;\n          }\n\n          if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n            container.bubble.clicking = false;\n            container.bubble.durationEnd = false;\n          }\n\n          var sizeData = {\n            bubbleObj: {\n              optValue: container.retina.bubbleModeSize,\n              value: particle.bubble.radius\n            },\n            particlesObj: {\n              optValue: Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n              value: particle.size.value\n            },\n            type: ProcessBubbleType_1.ProcessBubbleType.size\n          };\n          this.process(particle, distMouse, timeSpent, sizeData);\n          var opacityData = {\n            bubbleObj: {\n              optValue: options.interactivity.modes.bubble.opacity,\n              value: particle.bubble.opacity\n            },\n            particlesObj: {\n              optValue: Utils_1.getRangeMax(particle.options.opacity.value),\n              value: particle.opacity.value\n            },\n            type: ProcessBubbleType_1.ProcessBubbleType.opacity\n          };\n          this.process(particle, distMouse, timeSpent, opacityData);\n\n          if (!container.bubble.durationEnd) {\n            if (distMouse <= container.retina.bubbleModeDistance) {\n              this.hoverBubbleColor(particle, distMouse);\n            } else {\n              delete particle.bubble.color;\n            }\n          } else {\n            delete particle.bubble.color;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"hoverBubble\",\n    value: function hoverBubble() {\n      var container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      var _iterator3 = _createForOfIteratorHelper(query),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var particle = _step3.value;\n          particle.bubble.inRange = true;\n          var pos = particle.getPosition(),\n              pointDistance = Utils_1.getDistance(pos, mousePos),\n              ratio = 1 - pointDistance / distance;\n\n          if (pointDistance <= distance) {\n            if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n              this.hoverBubbleSize(particle, ratio);\n              this.hoverBubbleOpacity(particle, ratio);\n              this.hoverBubbleColor(particle, ratio);\n            }\n          } else {\n            this.reset(particle);\n          }\n\n          if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n            this.reset(particle);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"hoverBubbleSize\",\n    value: function hoverBubbleSize(particle, ratio, divBubble) {\n      var container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n      if (modeSize === undefined) {\n        return;\n      }\n\n      var optSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var pSize = particle.size.value;\n      var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n      if (size !== undefined) {\n        particle.bubble.radius = size;\n      }\n    }\n  }, {\n    key: \"hoverBubbleOpacity\",\n    value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n      if (!modeOpacity) {\n        return;\n      }\n\n      var optOpacity = particle.options.opacity.value;\n      var pOpacity = particle.opacity.value;\n      var opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.getRangeMax(optOpacity), ratio);\n\n      if (opacity !== undefined) {\n        particle.bubble.opacity = opacity;\n      }\n    }\n  }, {\n    key: \"hoverBubbleColor\",\n    value: function hoverBubbleColor(particle, ratio, divBubble) {\n      var options = this.container.actualOptions;\n      var bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n      if (!particle.bubble.finalColor) {\n        var modeColor = bubbleOptions.color;\n\n        if (!modeColor) {\n          return;\n        }\n\n        var bubbleColor = modeColor instanceof Array ? Utils_1.itemFromArray(modeColor) : modeColor;\n        particle.bubble.finalColor = Utils_1.colorToHsl(bubbleColor);\n      }\n\n      if (!particle.bubble.finalColor) {\n        return;\n      }\n\n      if (bubbleOptions.mix) {\n        particle.bubble.color = undefined;\n        var pColor = particle.getFillColor();\n        particle.bubble.color = pColor ? Utils_1.rgbToHsl(Utils_1.colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n      } else {\n        particle.bubble.color = particle.bubble.finalColor;\n      }\n    }\n  }]);\n\n  return Bubbler;\n}(ExternalInteractorBase_1.ExternalInteractorBase);\n\nexports.Bubbler = Bubbler;","map":null,"metadata":{},"sourceType":"script"}